{"version":3,"sources":["firebase.js","components/CallCell.js","components/Dashboard.js","components/Room.js","components/Login.js","components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","CallCell","props","seeMetricsForCall","bind","this","videoRecvBitsPerSecondARR","callData","videoSendBitsPerSecondARR","videoRecvPacketLossARR","videoSendPacketLossARR","className","onClick","id","React","Component","Dashboard","state","callLink","callHistory","metricsForOneCall","createRoom","granularData","granularizeData","setState","interval","newData","videoRecvBitsPerSecondNUM","videoSendBitsPerSecondNUM","videoRecvPacketLossNUM","videoSendPacketLossNUM","i","length","push","videoRecvBitsPerSecond","videoSendBitsPerSecond","videoRecvPacketLoss","videoSendPacketLoss","fetch","method","then","res","json","data","name","catch","error","console","log","db","firestore","callHistoryTemp","emailID","window","location","pathname","split","collection","get","querySnapshot","forEach","doc","to","width","height","strokeDasharray","tick","type","dataKey","stroke","activeDot","r","map","call","key","Room","seeNetworkStats","saveMetrics","metricsHistory","callFrame","meetingState","getNetworkStats","setTimeout","metricsTemp","stats","latest","timestamp","localStorage","getItem","roomID","set","history","DailyIframe","createFrame","showLeaveButton","iframeStyle","position","top","left","join","url","on","iframe","style","visibility","withRouter","Login","email","handleChange","submitEmail","event","target","value","setItem","placeholder","onChange","App","exact","path","component","from","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ca54ae57.chunk.js","sourcesContent":["import firebase from 'firebase'\n\n  // Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDG3goJB9T9DQzoeY56SxFYyebVp9HCuj0\",\n    authDomain: \"dailydashboard-80ccc.firebaseapp.com\",\n    databaseURL: \"https://dailydashboard-80ccc.firebaseio.com\",\n    projectId: \"dailydashboard-80ccc\",\n    storageBucket: \"dailydashboard-80ccc.appspot.com\",\n    messagingSenderId: \"19890360437\",\n    appId: \"1:19890360437:web:06ac7f9b1fc46c853ba83c\",\n    measurementId: \"G-X44BZG74J5\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  firebase.analytics();\n\n  export default firebase","import React from 'react'\n\nclass CallCell extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.seeMetricsForCall = this.seeMetricsForCall.bind(this)\n    }\n\n    seeMetricsForCall(){ // sends metrics from this video call to the dashboard for display\n        this.props.seeMetricsForCall({\n            videoRecvBitsPerSecondARR: this.props.callData[\"videoRecvBitsPerSecondARR\"],\n            videoSendBitsPerSecondARR: this.props.callData[\"videoSendBitsPerSecondARR\"],\n            videoRecvPacketLossARR: this.props.callData[\"videoRecvPacketLossARR\"],\n            videoSendPacketLossARR: this.props.callData[\"videoSendPacketLossARR\"]\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <div className=\"callCell\">\n                    <button className=\"roomIDInCallCell\" onClick={this.seeMetricsForCall}>{this.props.id}</button>\n                </div>\n                <hr/>\n            </div>\n        )\n    }\n}\n\nexport default CallCell","import React from 'react';\nimport {Link} from 'react-router-dom'\nimport firebase from '../firebase'\nimport CallCell from './CallCell'\nimport {LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line} from 'recharts'\n\nclass Dashboard extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      callLink: \"\",\n      callHistory: [],\n      metricsForOneCall: []\n    }\n\n    this.createRoom = this.createRoom.bind(this)\n    this.seeMetricsForCall = this.seeMetricsForCall.bind(this)\n  }\n\n  seeMetricsForCall(callData){ // preparing data for display; called from CallCell component\n      var granularData = this.granularizeData(callData, 15)\n      this.setState({metricsForOneCall: granularData})\n  }\n\n  granularizeData(callData, interval){\n      /*\n        returns callData--but in granularity intervals to be used for metric graph: \n        cycles through each second in call data, calculates averages across the interval parameter (in seconds)\n      */\n      var newData = []\n      var videoRecvBitsPerSecondNUM = 0\n      var videoSendBitsPerSecondNUM = 0\n      var videoRecvPacketLossNUM = 0\n      var videoSendPacketLossNUM = 0\n\n      for (var i = 0; i < callData.videoRecvBitsPerSecondARR.length; i++){\n        videoRecvBitsPerSecondNUM += callData.videoRecvBitsPerSecondARR[i]\n        videoSendBitsPerSecondNUM += callData.videoSendBitsPerSecondARR[i]\n        videoRecvPacketLossNUM += callData.videoRecvPacketLossARR[i]\n        videoSendPacketLossNUM += callData.videoSendPacketLossARR[i]\n        if ((i+1) % interval == 0){\n            newData.push({\n                videoRecvBitsPerSecond: videoRecvBitsPerSecondNUM / interval,\n                videoSendBitsPerSecond: videoSendBitsPerSecondNUM / interval,\n                videoRecvPacketLoss: videoRecvPacketLossNUM / interval,\n                videoSendPacketLoss: videoSendPacketLossNUM / interval,\n            })\n            videoRecvBitsPerSecondNUM = 0\n            videoSendBitsPerSecondNUM = 0\n            videoRecvPacketLossNUM = 0\n            videoSendPacketLossNUM = 0\n        }\n      }\n      return newData\n  }\n\n  createRoom(){ // tells backend to create a new room, then creates a url for that room using the new room's name\n    fetch(\"/createRoom\", {method: \"post\"}).then(function(res){\n      return res.json()\n    }).then(function(data){\n      this.setState({callLink: \"https://morning-mesa-27765.herokuapp.com/Room/\" + data.name})\n    }.bind(this)).catch(function(error){\n      console.log(error)\n    })\n  }\n\n  componentDidMount(){\n      this.db = firebase.firestore()\n      var callHistoryTemp = []\n      var emailID = window.location.pathname.split(\"/\")[2]\n      this.db.collection(emailID).get().then(function(querySnapshot){ // loads all calls completed by this user\n          querySnapshot.forEach(function(doc){\n            callHistoryTemp.push(doc)\n          })\n          this.setState({callHistory: callHistoryTemp})\n      }.bind(this)).catch(function(error){\n        console.log(error)\n      })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"createRoomHolder\">\n            <button className=\"createRoomBtn\" onClick={this.createRoom}>Click here to create a room and generate a link</button>\n            <Link className=\"roomLink\" to={this.state.callLink}>{this.state.callLink}</Link>\n        </div>\n        <div className=\"metricsDisplay\"> {/* Setting up graph display (if call was selected) */}\n            {this.state.metricsForOneCall.length > 0 ?\n                <LineChart width={800} height={230} data={this.state.metricsForOneCall}>\n                    <CartesianGrid strokeDasharray=\"3 3\"/>\n                    <XAxis tick={false} height={10}/>\n                    <YAxis/>\n                    <Tooltip/>\n                    <Legend/>\n                    <Line type=\"monotone\" dataKey=\"videoRecvBitsPerSecond\" stroke=\"#152CFE\" activeDot={{ r: 8 }}/>\n                    <Line type=\"monotone\" dataKey=\"videoSendBitsPerSecond\" stroke=\"#32FF45\" activeDot={{ r: 8 }}/>\n                    <Line type=\"monotone\" dataKey=\"videoRecvPacketLoss\" stroke=\"#B200FF\" activeDot={{ r: 8 }}/>\n                    <Line type=\"monotone\" dataKey=\"videoSendPacketLoss\" stroke=\"#49E1FF\" activeDot={{ r: 8 }}/>\n                </LineChart> :\n                <label className=\"inGraphLbl\">Please select a room ID from the list below to see that call's metrics.{<br/>}If the selected call lasted for less than 15 seconds, data will not appear.</label>\n            }\n        </div>\n        <div className=\"roomsListHolder\"> {/* Displaying list of user's calls (if # of calls > 0) */}\n            <label className=\"roomsTitle\">Rooms:</label>\n            {this.state.callHistory.length > 0 ?\n                this.state.callHistory.map(call => \n                    <CallCell key={call.id} id={call.id} callData={call.data()} seeMetricsForCall={this.seeMetricsForCall}/>\n                ) :\n                <label className=\"noVideoCallsLbl\">You have not completed any video calls. Please click the button at the top to get started.</label>\n            }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard","import React from 'react'\nimport firebase from '../firebase.js'\nimport {withRouter} from 'react-router-dom'\n\nclass Room extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.seeNetworkStats = this.seeNetworkStats.bind(this)\n        this.saveMetrics = this.saveMetrics.bind(this)\n\n        this.metricsHistory = []\n    }\n\n    seeNetworkStats(){ // continuously calls frontend library method getNetworkStats() every 1 second\n        if (this.callFrame.meetingState() === \"left-meeting\"){\n            return\n        }\n        this.callFrame.getNetworkStats().then(function(data){\n            setTimeout(this.seeNetworkStats, 1000)\n            const metricsTemp = data.stats.latest\n            if (metricsTemp.timestamp == null){\n                return\n            }\n            this.metricsHistory.push({ // collect 4 needed metrics\n                videoRecvBitsPerSecond: metricsTemp.videoRecvBitsPerSecond,\n                videoSendBitsPerSecond: metricsTemp.videoSendBitsPerSecond,\n                videoRecvPacketLoss: metricsTemp.videoRecvPacketLoss,\n                videoSendPacketLoss: metricsTemp.videoSendPacketLoss\n            })\n        }.bind(this)).catch(function(error){\n            console.log(error)\n        })\n    }\n\n    saveMetrics(){ // saves call metrics if the user logged in on this device\n        var emailID = localStorage.getItem(\"emailID\") || \"\"\n        if (emailID === \"\"){\n            return\n        }\n        this.db.collection(emailID).doc(this.roomID).set({\n            videoRecvBitsPerSecondARR: this.metricsHistory.map(data => data.videoRecvBitsPerSecond),\n            videoSendBitsPerSecondARR: this.metricsHistory.map(data => data.videoSendBitsPerSecond),\n            videoRecvPacketLossARR: this.metricsHistory.map(data => data.videoRecvPacketLoss),\n            videoSendPacketLossARR: this.metricsHistory.map(data => data.videoSendPacketLoss)\n        }).then(function(){\n            console.log(\"saved metrics to database\")\n            this.props.history.push(\"/Dashboard/\" + emailID)\n        }.bind(this)).catch(function(error){\n            console.log(error)\n        })\n    }\n\n    componentDidMount(){\n        this.db = firebase.firestore()\n        setTimeout(() => {\n            this.callFrame = window.DailyIframe.createFrame({ // create call frame\n                showLeaveButton: true, \n                iframeStyle: {\n                    position: 'fixed',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: \"100%\",\n            }});\n            this.roomID = window.location.pathname.split(\"/\")[2]\n            this.callFrame.join({ url: \"https://dailydemoapp.daily.co/\" + this.roomID}).then(function(){ // join call room\n                setTimeout(this.seeNetworkStats, 1000)\n            }.bind(this)).catch(function(error){\n                console.log(error)\n            })\n            this.callFrame.on('left-meeting', () => { // saves metrics when the user leaves the call room\n                this.callFrame.iframe().style.visibility = \"hidden\"\n                this.saveMetrics()\n            })\n        }, 1000)\n    }\n\n    render(){\n        return(\n            <div></div>\n        )\n    }\n\n}\n\nexport default withRouter(Room)","import React from 'react'\nimport {withRouter} from 'react-router-dom'\n\nclass Login extends React.Component{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            email: \"\"\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.submitEmail = this.submitEmail.bind(this)\n    }\n\n    handleChange(event){\n        this.setState({email: event.target.value})\n    }\n\n    submitEmail(){ // email is used to identify the user in the database\n        localStorage.setItem(\"emailID\", this.state.email)\n        this.props.history.push(\"/Dashboard/\" + this.state.email)\n    }\n\n    render(){\n        return(\n            <div className=\"loginBox\">\n                <label className=\"welcomeTitle\">Welcome to your Daily.co dashboard.</label>\n                <label className=\"enterEmailTitle\">Please enter your email to continue:</label>\n                <input className=\"emailTF\" name=\"email\" type=\"email\" placeholder=\"Email\" onChange={this.handleChange} value={this.state.email}/>\n                <button className=\"loginBtn\" onClick={this.submitEmail}>Continue to Dashboard</button>\n            </div>\n        )\n    }\n}\n\nexport default Login","import React from 'react';\nimport '../App.css';\nimport {Route, Redirect} from 'react-router-dom'\nimport Dashboard from './Dashboard'\nimport Room from './Room'\nimport Login from './Login'\n\nclass App extends React.Component {\n\n  render(){ // using routes to setup page navigation\n    return (\n      <div className=\"App\">\n          <Route exact path=\"/\" component={App}>\n            <Redirect exact from=\"/\" to=\"/Login\" />\n          </Route>\n          <Route path=\"/Login\" component={Login}/>\n          <Route exact path=\"/Dashboard/:emailID\" component={Dashboard}/>\n          <Route path=\"/Room/:roomID\" component={Room}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App/>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}