{"version":3,"sources":["firebase.js","components/CallCell.js","components/Dashboard.js","components/Room.js","components/Login.js","components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","CallCell","props","seeMetricsForCall","bind","this","loadAllParticipantMetricsForRoom","id","className","onClick","React","Component","Dashboard","state","callLink","callHistory","metricsForOneRoom","createRoom","renderCharts","roomID","participantsData","db","collection","doc","emailID","get","then","querySnapshot","forEach","push","data","callData","granularData","granularizeData","setState","interval","collectiveData","i","length","metricsObj","videoRecvBitsPerSecondNUM","videoSendBitsPerSecondNUM","videoRecvPacketLossNUM","videoSendPacketLossNUM","participantData","dataArrForThisParticipant","j","videoRecvBitsPerSecondARR","videoSendBitsPerSecondARR","videoRecvPacketLossARR","videoSendPacketLossARR","timestamp","videoRecvBitsPerSecond","videoSendBitsPerSecond","videoRecvPacketLoss","videoSendPacketLoss","fetch","method","res","json","name","set","createdAt","Date","catch","error","console","log","firestore","window","location","pathname","split","callHistoryTemp","map","index","key","width","height","strokeDasharray","label","dataKey","tick","fontSize","wrapperStyle","type","stroke","activeDot","r","href","call","Room","seeNetworkStats","saveMetrics","metricsHistory","callFrame","meetingState","getNetworkStats","setTimeout","metricsTemp","stats","latest","localStorage","getItem","history","DailyIframe","createFrame","showLeaveButton","iframeStyle","position","top","left","join","url","on","iframe","style","visibility","withRouter","Login","email","handleChange","submitEmail","event","target","value","setItem","lastLoggedIn","placeholder","onChange","App","exact","path","component","from","to","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.94f777d5.chunk.js","sourcesContent":["import firebase from 'firebase'\n\n  // Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDG3goJB9T9DQzoeY56SxFYyebVp9HCuj0\",\n    authDomain: \"dailydashboard-80ccc.firebaseapp.com\",\n    databaseURL: \"https://dailydashboard-80ccc.firebaseio.com\",\n    projectId: \"dailydashboard-80ccc\",\n    storageBucket: \"dailydashboard-80ccc.appspot.com\",\n    messagingSenderId: \"19890360437\",\n    appId: \"1:19890360437:web:06ac7f9b1fc46c853ba83c\",\n    measurementId: \"G-X44BZG74J5\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  firebase.analytics();\n\n  export default firebase","import React from 'react'\n\nclass CallCell extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.seeMetricsForCall = this.seeMetricsForCall.bind(this)\n    }\n\n    seeMetricsForCall(){ // sends id for this call room up to Dashboard method for further querying and preparation of data\n        this.props.loadAllParticipantMetricsForRoom(this.props.id)\n    }\n\n    render(){\n        return(\n            <div>\n                <div className=\"callCell\">\n                    <button className=\"roomIDInCallCell\" onClick={this.seeMetricsForCall}>{this.props.id}</button>\n                </div>\n                <hr/>\n            </div>\n        )\n    }\n}\n\nexport default CallCell","import React from 'react';\nimport {Link} from 'react-router-dom'\nimport firebase from '../firebase'\nimport CallCell from './CallCell'\nimport {LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line} from 'recharts'\n\nclass Dashboard extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      callLink: \"\",\n      callHistory: [],\n      metricsForOneRoom: []\n    }\n\n    this.createRoom = this.createRoom.bind(this)\n    this.seeMetricsForCall = this.seeMetricsForCall.bind(this)\n    this.loadAllParticipantMetricsForRoom = this.loadAllParticipantMetricsForRoom.bind(this)\n    this.renderCharts = this.renderCharts.bind(this)\n  }\n\n  loadAllParticipantMetricsForRoom(roomID){ // load call data for each call participant; called from CallCell component\n      var participantsData = []\n      this.db.collection(\"users\").doc(this.emailID).collection(\"rooms\").doc(roomID).collection(\"participants\").get().then(function(querySnapshot){\n        querySnapshot.forEach(function(doc){\n          participantsData.push(doc.data())\n        })\n        this.seeMetricsForCall(participantsData)\n      }.bind(this))\n  }\n\n  seeMetricsForCall(callData){ // preparing data for display by setting 15 sec granularity\n      var granularData = this.granularizeData(callData, 15)\n      this.setState({metricsForOneRoom: granularData})\n  }\n\n  granularizeData(participantsData, interval){\n      /*\n        returns participantsData--but in granular intervals to be used for metric graphs: \n        cycles through each second in each participants's data, calculates averages across the interval parameter (in seconds)\n      */\n      var collectiveData = []\n      for (var i = 0; i < participantsData.length; i++){\n          var metricsObj = {videoRecvBitsPerSecondNUM: 0, videoSendBitsPerSecondNUM: 0, videoRecvPacketLossNUM: 0, videoSendPacketLossNUM: 0}\n          var participantData = participantsData[i]\n          var dataArrForThisParticipant = []\n          for (var j = 0; j < participantData.videoRecvBitsPerSecondARR.length; j++){\n            metricsObj.videoRecvBitsPerSecondNUM += participantData.videoRecvBitsPerSecondARR[j]\n            metricsObj.videoSendBitsPerSecondNUM += participantData.videoSendBitsPerSecondARR[j]\n            metricsObj.videoRecvPacketLossNUM += participantData.videoRecvPacketLossARR[j]\n            metricsObj.videoSendPacketLossNUM += participantData.videoSendPacketLossARR[j]\n            if ((j+1) % interval == 0){\n                dataArrForThisParticipant.push({\n                    timestamp: j+1,\n                    videoRecvBitsPerSecond: metricsObj.videoRecvBitsPerSecondNUM / interval,\n                    videoSendBitsPerSecond: metricsObj.videoSendBitsPerSecondNUM / interval,\n                    videoRecvPacketLoss: metricsObj.videoRecvPacketLossNUM / interval,\n                    videoSendPacketLoss: metricsObj.videoSendPacketLossNUM / interval,\n                })\n                metricsObj.videoRecvBitsPerSecondNUM = 0\n                metricsObj.videoSendBitsPerSecondNUM = 0\n                metricsObj.videoRecvPacketLossNUM = 0\n                metricsObj.videoSendPacketLossNUM = 0\n            }\n          }\n          collectiveData.push(dataArrForThisParticipant)\n      }\n      return collectiveData\n  }\n\n  createRoom(){ // tells backend to create a new room, then saves new room to database, then creates a url for that room\n    fetch(\"/createRoom\", {method: \"post\"}).then(function(res){\n      return res.json()\n    }).then(function(data){\n        this.db.collection(\"users\").doc(this.emailID).collection(\"rooms\").doc(data.name).set({\n          createdAt: new Date()\n        }).then(function(){\n          this.setState({callLink: \"https://morning-mesa-27765.herokuapp.com/Room/\" + data.name + \"/\" + this.emailID})\n        }.bind(this)).catch(function(error){\n          console.log(error)\n        })\n    }.bind(this)).catch(function(error){\n      console.log(error)\n    })\n  }\n\n  componentDidMount(){\n      this.db = firebase.firestore()\n      this.emailID = window.location.pathname.split(\"/\")[2]\n      this.db.collection(\"users\").doc(this.emailID).collection(\"rooms\").get().then(function(querySnapshot){ // loads all call rooms created by this user\n          var callHistoryTemp = []\n          querySnapshot.forEach(function(doc){\n            callHistoryTemp.push(doc)\n          })\n          this.setState({callHistory: callHistoryTemp})\n      }.bind(this)).catch(function(error){\n        console.log(error)\n      })\n  }\n\n  renderCharts(){ // shows two charts for each participant\n    return this.state.metricsForOneRoom.map((participantData, index) => \n      <div>\n        <div className=\"chartsHolder\">\n          <LineChart key={index} width={500} height={285} data={participantData}>\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis label={\"Seconds since participant \" + (index+1) + \" joined call\"} dataKey=\"timestamp\" tick={{fontSize: \"10px\"}} height={60} />\n            <YAxis tick={{fontSize: \"12px\"}}/>\n            <Tooltip/>\n            <Legend wrapperStyle={{fontSize: \"13px\"}}/>\n            <Line type=\"monotone\" dataKey=\"videoRecvBitsPerSecond\" stroke=\"#152CFE\" activeDot={{ r: 8 }}/>\n            <Line type=\"monotone\" dataKey=\"videoSendBitsPerSecond\" stroke=\"#00C613\" activeDot={{ r: 8 }}/>\n          </LineChart>\n          <LineChart key={index} width={500} height={285} data={participantData}>\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis label={\"Seconds since participant \" + (index+1) + \" joined call\"} dataKey=\"timestamp\" tick={{fontSize: \"10px\"}} height={60} />\n            <YAxis tick={{fontSize: \"12px\"}}/>\n            <Tooltip/>\n            <Legend wrapperStyle={{fontSize: \"13px\"}}/>\n            <Line type=\"monotone\" dataKey=\"videoRecvPacketLoss\" stroke=\"#B200FF\" activeDot={{ r: 8 }}/>\n            <Line type=\"monotone\" dataKey=\"videoSendPacketLoss\" stroke=\"#00C6CD\" activeDot={{ r: 8 }}/>\n          </LineChart>\n        </div>\n        <hr/>\n      </div>\n    )\n  }\n\n  render(){\n    return (\n      <div className=\"dashboard\">\n        <div className=\"createRoomHolder\">\n            <button className=\"createRoomBtn\" onClick={this.createRoom}>Click here to create a room and generate a link</button>\n            <a className=\"roomLink\" href={this.state.callLink}>{this.state.callLink}</a>\n        </div>\n        <div className=\"metricsDisplay\"> {/* Setting up graph displays (if call was selected from list) */}\n            {this.state.metricsForOneRoom.length > 0 ?\n                this.renderCharts() :\n                <label className=\"inGraphLbl\">Please select a room ID from the list below to see that call's metrics.{<br/>}If the selected call lasted for less than 15 seconds, data will not appear.</label>\n            }\n        </div>\n        <div className=\"roomsListHolder\"> {/* Displaying list of user's calls (if # of calls > 0) */}\n            <label className=\"roomsTitle\">Rooms:</label>\n            {this.state.callHistory.length > 0 ?\n                this.state.callHistory.map(call => \n                    <CallCell key={call.id} id={call.id} loadAllParticipantMetricsForRoom={this.loadAllParticipantMetricsForRoom}/>\n                ) :\n                <label className=\"noVideoCallsLbl\">You have not completed any video calls. Please click the button at the top to get started.</label>\n            }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard","import React from 'react'\nimport firebase from '../firebase.js'\nimport {withRouter} from 'react-router-dom'\n\nclass Room extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.seeNetworkStats = this.seeNetworkStats.bind(this)\n        this.saveMetrics = this.saveMetrics.bind(this)\n\n        this.metricsHistory = []\n    }\n\n    seeNetworkStats(){ // continuously calls frontend library method getNetworkStats() every 1 second\n        if (this.callFrame.meetingState() === \"left-meeting\"){\n            return\n        }\n        this.callFrame.getNetworkStats().then(function(data){\n            setTimeout(this.seeNetworkStats, 1000)\n            const metricsTemp = data.stats.latest\n            if (metricsTemp.timestamp == null){\n                return\n            }\n            this.metricsHistory.push({ // collect 4 needed metrics\n                videoRecvBitsPerSecond: metricsTemp.videoRecvBitsPerSecond,\n                videoSendBitsPerSecond: metricsTemp.videoSendBitsPerSecond,\n                videoRecvPacketLoss: metricsTemp.videoRecvPacketLoss,\n                videoSendPacketLoss: metricsTemp.videoSendPacketLoss\n            })\n        }.bind(this)).catch(function(error){\n            console.log(error)\n        })\n    }\n\n    saveMetrics(){ // saves personal call metrics to the host's room\n        var emailID = window.location.pathname.split(\"/\")[3]\n        this.db.collection(\"users\").doc(emailID).collection(\"rooms\").doc(this.roomID).collection(\"participants\").doc().set({\n            videoRecvBitsPerSecondARR: this.metricsHistory.map(data => data.videoRecvBitsPerSecond),\n            videoSendBitsPerSecondARR: this.metricsHistory.map(data => data.videoSendBitsPerSecond),\n            videoRecvPacketLossARR: this.metricsHistory.map(data => data.videoRecvPacketLoss),\n            videoSendPacketLossARR: this.metricsHistory.map(data => data.videoSendPacketLoss)\n        }).then(function(){\n            console.log(\"saved participant metrics to database\")\n            if (localStorage.getItem(\"emailID\") || \"\" !== \"\"){ // user previously logged in to dashboard (the room host)\n                this.props.history.push(\"/Dashboard/\" + emailID)\n            }\n        }.bind(this)).catch(function(error){\n            console.log(error)\n        })\n    }\n\n    componentDidMount(){\n        this.db = firebase.firestore()\n        setTimeout(() => {\n            this.callFrame = window.DailyIframe.createFrame({ // create call frame\n                showLeaveButton: true, \n                iframeStyle: {\n                    position: 'fixed',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: \"100%\",\n            }});\n            this.roomID = window.location.pathname.split(\"/\")[2]\n            this.callFrame.join({ url: \"https://dailydemoapp.daily.co/\" + this.roomID}).then(function(){ // join call room\n                setTimeout(this.seeNetworkStats, 1000)\n            }.bind(this)).catch(function(error){\n                console.log(error)\n            })\n            this.callFrame.on('left-meeting', () => { // saves metrics when the user leaves the call room (must click \"leave\" to save)\n                this.callFrame.iframe().style.visibility = \"hidden\"\n                this.saveMetrics()\n            })\n        }, 2000)\n    }\n\n    render(){\n        return(\n            <div></div>\n        )\n    }\n\n}\n\nexport default withRouter(Room)","import React from 'react'\nimport firebase from '../firebase'\nimport {withRouter} from 'react-router-dom'\n\nclass Login extends React.Component{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            email: \"\"\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.submitEmail = this.submitEmail.bind(this)\n    }\n\n    handleChange(event){\n        this.setState({email: event.target.value})\n    }\n\n    submitEmail(){ // email is used to identify the host in the database and who the host is during calls\n        localStorage.setItem(\"emailID\", this.state.email)\n        firebase.firestore().collection(\"users\").doc(this.state.email).set({\n            lastLoggedIn: new Date()\n        }).then(function(){\n            this.props.history.push(\"/Dashboard/\" + this.state.email)\n        }.bind(this)).catch(function(error){\n            console.log(error)\n        })\n    }\n\n    render(){\n        return(\n            <div className=\"loginBox\">\n                <label className=\"welcomeTitle\">Welcome to your Daily.co dashboard.</label>\n                <label className=\"enterEmailTitle\">Please enter your email to continue:</label>\n                <input className=\"emailTF\" name=\"email\" type=\"email\" placeholder=\"Email\" onChange={this.handleChange} value={this.state.email}/>\n                <button className=\"loginBtn\" onClick={this.submitEmail}>Continue to Dashboard</button>\n            </div>\n        )\n    }\n}\n\nexport default Login","import React from 'react';\nimport '../App.css';\nimport {Route, Redirect} from 'react-router-dom'\nimport Dashboard from './Dashboard'\nimport Room from './Room'\nimport Login from './Login'\n\nclass App extends React.Component {\n\n  render(){ // using routes to setup page navigation\n    return (\n      <div className=\"App\">\n          <Route exact path=\"/\" component={App}>\n            <Redirect exact from=\"/\" to=\"/Login\" />\n          </Route>\n          <Route path=\"/Login\" component={Login}/>\n          <Route exact path=\"/Dashboard/:emailID\" component={Dashboard}/>\n          <Route path=\"/Room/:roomID/:emailID\" component={Room}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App/>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}