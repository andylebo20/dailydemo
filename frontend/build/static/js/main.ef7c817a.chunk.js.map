{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","firebase.js","Room.js","index.js"],"names":["module","exports","App","props","state","callLink","createRoom","bind","fetch","method","then","res","json","data","this","setState","name","catch","error","console","log","className","onClick","to","React","Component","withRouter","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","Room","getTheNetworkStats","saveMetrics","metricsHistory","callFrame","meetingState","getNetworkStats","setTimeout","metricsTemp","stats","latest","timestamp","push","videoRecvBitsPerSecond","videoSendBitsPerSecond","videoRecvPacketLoss","videoSendPacketLoss","db","collection","doc","set","videoRecvBitsPerSecondARR","map","videoSendBitsPerSecondARR","videoRecvPacketLossARR","videoSendPacketLossARR","firestore","DailyIframe","createFrame","showLeaveButton","join","url","pathname","split","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ef7c817a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {withRouter, Link} from 'react-router-dom'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      callLink: \"\"\n    }\n\n    this.createRoom = this.createRoom.bind(this)\n  }\n\n  createRoom(){\n    fetch(\"/createRoom\", {method: \"post\"}).then(function(res){\n      return res.json()\n    }).then(function(data){\n      //   https://dailydemoapp.daily.co/InPSAzilx8qAslvN31SA\n      this.setState({callLink: \"/Room/\" + data.name})\n    }.bind(this)).catch(function(error){\n      console.log(error)\n    })\n  }//////\n  render(){ // make a different comp the home comp and then make <Switch> in here. Not in index.js. Only the router goes in index.\n    return (\n      <div className=\"App\">\n        <button onClick={this.createRoom}>Create and navigate to room</button>\n        <Link to={this.state.callLink}>{this.state.callLink}</Link>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from 'firebase'\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  firebase.analytics();\n\n  export default firebase","import React from 'react'\nimport firebase from './firebase'\n\nclass Room extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.getTheNetworkStats = this.getTheNetworkStats.bind(this)\n        this.saveMetrics = this.saveMetrics.bind(this)\n\n        this.metricsHistory = []\n    }\n\n    getTheNetworkStats(){\n        if (this.callFrame.meetingState() === \"left-meeting\"){\n            return\n        }\n        this.callFrame.getNetworkStats().then(function(data){\n            console.log(data)\n            setTimeout(this.getTheNetworkStats, 1000)\n            const metricsTemp = data.stats.latest\n            if (metricsTemp.timestamp == null){\n                return\n            }\n            this.metricsHistory.push({\n                videoRecvBitsPerSecond: metricsTemp.videoRecvBitsPerSecond,\n                videoSendBitsPerSecond: metricsTemp.videoSendBitsPerSecond,\n                videoRecvPacketLoss: metricsTemp.videoRecvPacketLoss,\n                videoSendPacketLoss: metricsTemp.videoSendPacketLoss\n            })\n        }.bind(this)).catch(function(error){\n            console.log(error)\n        })\n    }\n\n    saveMetrics(){\n        console.log(this.metricsHistory)\n        this.db.collection(\"person1\").doc().set({ // logs array of metric history for each call that this person creates\n            videoRecvBitsPerSecondARR: this.metricsHistory.map(data => data.videoRecvBitsPerSecond),\n            videoSendBitsPerSecondARR: this.metricsHistory.map(data => data.videoSendBitsPerSecond),\n            videoRecvPacketLossARR: this.metricsHistory.map(data => data.videoRecvPacketLoss),\n            videoSendPacketLossARR: this.metricsHistory.map(data => data.videoSendPacketLoss)\n        }).then(function(){\n            console.log(\"saved metrics\")\n        }).catch(function(error){\n            console.log(error)\n        })\n    }\n\n    componentDidMount(){\n        this.db = firebase.firestore()\n        this.callFrame = window.DailyIframe.createFrame({showLeaveButton: true});\n        this.callFrame.join({ url: \"https://dailydemoapp.daily.co/\" + window.location.pathname.split(\"/\")[2]}).then(function(){\n            setTimeout(this.getTheNetworkStats, 1000)\n        }.bind(this)).catch(function(error){\n            console.log(error)\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <button onClick={this.getTheNetworkStats}>Get Network Stats</button>\n                <button onClick={this.saveMetrics}>Save Metrics to Firebase</button>\n            </div>\n        )\n    }\n\n}\n\nexport default Room","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Room from './Room'\n\nReactDOM.render(\n  <Router>\n    <Route exact path=\"/\" component={App}/>\n    <Route path=\"/Room/:roomID\" render={props => <Room {...props}/>}/>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}